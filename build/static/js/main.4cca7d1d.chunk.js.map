{"version":3,"sources":["store/contants/index.js","store/reducers/index.js","store/reducers/messageReducer.js","store/index.js","components/Input/index.js","components/DisplayFormState/index.js","store/actions/message.js","containers/Form/index.js","containers/DisplayMessage/index.js","index.js"],"names":["SET_MESSAGE","RESET_MESSAGE","combineReducers","message","state","type","types","createStore","rootReducer","Inputs","componentDidUpdate","prevProps","props","errors","value","validateField","render","label","name","touched","rest","Item","htmlFor","style","display","color","marginTop","PureComponent","margin","fontFamily","background","fontSize","padding","JSON","stringify","resetMessage","formikEnhancer","withFormik","validationSchema","Yup","shape","email","required","password","min","max","mapPropsToValues","handleSubmit","values","setSubmitting","payload","setTimeout","alert","displayName","debounce","store","dispatch","dirty","handleBlur","handleChange","handleReset","isSubmitting","onSubmit","Input","placeholder","onChange","onBlur","className","onClick","handleFormReset","disabled","connect","App","Form","document","getElementById"],"mappings":"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","file":"static/js/main.4cca7d1d.chunk.js","sourcesContent":["export const SET_MESSAGE = \"SET_MESSAGE\";\nexport const RESET_MESSAGE = \"RESET_MESSAGE\";\n\n// const type = {\n//   SET_MESSAGE: \"SET_MESSAGE\",\n//   RESET_MESSAGE: \"RESET_MESSAGE\",\n// };\n\n// export default { type };\n","import { combineReducers } from \"redux\";\nimport message from \"./messageReducer\";\n\nexport default combineReducers({\n  message,\n});\n","import * as types from \"../contants\";\n\nexport default (state = \"\", { type }) => {\n  switch (type) {\n    case types.SET_MESSAGE:\n      return \"The email was succesfully validated.\";\n    case types.RESET_MESSAGE:\n      return \"Every thing is reset now\";\n    default:\n      return state;\n  }\n};\n","import { createStore } from \"redux\";\nimport rootReducer from \"../store/reducers\";\n\nexport default createStore(rootReducer);\n","import React, { Fragment, PureComponent } from \"react\";\nimport { Input, Form } from \"antd\";\nclass Inputs extends PureComponent {\n  componentDidUpdate = (prevProps) => {\n    const { errors, value } = this.props;\n    if (errors !== prevProps.errors || value !== prevProps.value) {\n      this.props.validateField({ errors, value });\n    }\n  };\n\n  render = () => {\n    const { errors, label, name, touched, validateField, ...rest } = this.props;\n    return (\n      <Fragment>\n        <Form.Item htmlFor={name} style={{ display: \"block\" }}>\n          {label}\n        </Form.Item>\n        <Input {...rest} name={name} />\n        {errors && touched && (\n          <div style={{ color: \"red\", marginTop: \".5rem\" }}>{errors}</div>\n        )}\n      </Fragment>\n    );\n  };\n}\n\nexport default Inputs;\n","import React from \"react\";\n\nexport default (props) => (\n  <div style={{ margin: \"1rem 0\" }}>\n    <h3 style={{ fontFamily: \"monospace\" }} />\n    <pre\n      style={{\n        background: \"#f6f8fa\",\n        fontSize: \".65rem\",\n        padding: \".5rem\",\n      }}\n    >\n      <strong>props</strong> = {JSON.stringify(props, null, 2)}\n    </pre>\n  </div>\n);\n","import * as types from \"../contants\";\n\nexport const setMessage = () => ({\n  type: types.SET_MESSAGE,\n});\n\nexport const resetMessage = () => ({\n  type: types.RESET_MESSAGE,\n});\n","import debounce from \"lodash/debounce\";\nimport React from \"react\";\nimport { withFormik } from \"formik\";\nimport Inputs from \"../../components/Input\";\nimport DisplayFormikState from \"../../components/DisplayFormState\";\nimport { resetMessage, setMessage } from \"../../store/actions/message\";\nimport store from \"../../store\";\nimport { Button } from \"antd\";\nimport * as Yup from \"yup\";\n\nconst formikEnhancer = withFormik({\n  validationSchema: Yup.object().shape({\n    email: Yup.string()\n      .email(\"Invalid email address\")\n      .required(\"Email is required!\"),\n    name: Yup.string().required(\"First Name should be required please\"),\n    password: Yup.string().min(4).max(15).required(),\n  }),\n  mapPropsToValues: (props) => ({\n    email: \"\",\n    name: \"\",\n  }),\n  handleSubmit: (values, { setSubmitting }) => {\n    const payload = {\n      ...values,\n    };\n\n    setTimeout(() => {\n      alert(JSON.stringify(payload, null, 2));\n      setSubmitting(false);\n    }, 1000);\n  },\n  displayName: \"MyForm\",\n});\n\nconst handleFormReset = (handleReset) => {\n  store.dispatch(resetMessage());\n  handleReset();\n};\n\nconst validateField = debounce(\n  ({ errors, value }) =>\n    !errors && value\n      ? store.dispatch(setMessage())\n      : store.dispatch(resetMessage()),\n  500\n);\n\nconst MyForm = (props) => {\n  const {\n    values,\n    touched,\n    dirty,\n    errors,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    isSubmitting,\n  } = props;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Inputs\n        name=\"email\"\n        label=\"Email\"\n        type=\"email\"\n        placeholder=\"Enter an email address.\"\n        errors={errors.email}\n        value={values.email}\n        touched={touched.email}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        validateField={validateField}\n      />\n\n      <Inputs\n        name=\"name\"\n        label=\"Name\"\n        type=\"name\"\n        placeholder=\"Enter an name.\"\n        errors={errors.name}\n        value={values.name}\n        touched={touched.name}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        validateField={validateField}\n      />\n      <Inputs\n        name=\"password\"\n        label=\"password\"\n        type=\"password\"\n        placeholder=\"Enter an password.\"\n        errors={errors.password}\n        value={values.password}\n        touched={touched.password}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        validateField={validateField}\n      />\n      <button\n        type=\"button\"\n        className=\"outline\"\n        onClick={() => handleFormReset(handleReset)}\n        disabled={!dirty || isSubmitting}\n      >\n        Reset\n      </button>\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n\n      <DisplayFormikState {...props} />\n    </form>\n  );\n};\n\nexport default formikEnhancer(MyForm);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./styles.css\";\n\nconst DisplayMessage = ({ message }) =>\n  message ? <div className=\"message-container\">{message}</div> : null;\n\nexport default connect((state) => ({ message: state.message }))(DisplayMessage);\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport Form from \"./containers/Form\";\nimport DisplayMessage from \"./containers/DisplayMessage\";\nimport \"./formik-demo.css\";\n\nconst App = () => (\n  <div className=\"app\">\n    <Provider store={store}>\n      <h1>Welcome to validation Form</h1>\n      <DisplayMessage />\n      <Form />\n    </Provider>\n  </div>\n);\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}